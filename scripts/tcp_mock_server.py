import socket
import threading

raw_data = """1,    1;  -171,   17;     0,   17;   -15,    1;   -24,    0;   -24,    0;   -24,    0;   -39,    1;   -54,    1;   -54,    0;   -54,    0;   -54,    0;   -54,    0;   -54,    0;   -54,    0;   -49,    0;   -24,    2;    10,    3;    34,    2;    39,    0;    39,    0;    39,    0;    44,    0;    44,    0;    44,    0;    44,    0;    49,    0;    49,    0;    44,    0;    39,    0;    34,    0;    24,    1;    19,    0;   -15,    3;   -39,    2;   -54,    1;   -64,    1;  -137,    7;  -176,    3;  -205,    2;  -210,    0;  -210,    0;  -210,    0;  -210,    0;  -210,    0;  -176,    3;   -73,   10;   200,   27;   723,   52;  1509,   78;  2633,  112;  4127,  149;  5812,  168;  7780,  196;  9900,  212; 12362,  246; 15190,  282; 18511,  332; 22233,  372; 26228,  399; 30438,  421; 34922,  448; 39777,  485; 45027,  525; 50541,  551; 56021,  548; 61355,  533; 66640,  528; 72188,  554; 78171,  598; 84496,  632; 90762,  626; 96731,  596;102421,  569;108145,  572;114099,  595;120253,  615;126265,  601;131858,  559;137055,  519;142212,  515;147653,  544;153421,  576;159268,  584;164787,  551;169822,  503;174565,  474;179474,  490;184861,  538;190600,  573;196202,  560;201364,  516;206161,  479;211059,  489;216525,  546;222547,  602;228628,  608;234166,  553;238972,  480;243525,  455;248516,  499;254309,  579;260722,  641;267037,  631;272566,  552;277269,  470;281831,  456;286964,  513;292899,  593;299072,  617;304596,  552;309119,  452;313173,  405;317779,  460;323586,  580;330160,  657;336451,  629;341716,  526;346126,  441;350742,  461;356505,  576;363411,  690;370493,  708;376677,  618;381722,  504;386479,  475;392076,  559;398890,  681;406211,  732;412932,  672;418373,  544;422993,  462;427882,  488;433748,  586;440352,  660;446716,  636;452034,  531;456445,  441;460880,  443;466326,  544;472865,  653;479635,  677;485691,  605;490746,  505;495274,  452;500285,  501;506161,  587;512481,  632;    30,   30;512481,    0;518532,  605;523783,  525;528423,  464;533121,  469;538504,  538;544502,  599;550558,  605;556121,  556;560859,  473;565230,  437;570002,  477;575467,  546;581651,  618;587731,  608;593226,  549;598169,  494;602975,  480;608699,  572;615356,  665;622502,  714;629344,  684;635118,  577;640158,  504;644954,  479;650415,  546;656886,  647;663807,  692;670791,  698;677165,  637;682841,  567;688169,  532;693259,  509;698070,  481;701884,  381;704390,  250;705635,  124;706167,   53;707061,   89;708043,   98;708043,    0;708043,    0;708043,    0;708043,    0;708043,    0;705782,  226;704111,  167;702998,  111;702187,   81;701376,   81;700692,   68;700692,    0;700614,    7;700595,    1;700595,    0;700595,    0;700629,    3;700692,    6;700712,    2;701112,   40;701767,   65;702446,   67;702978,   53;703408,   43;703887,   47;704478,   59;705103,   62;705669,   56;706133,   46;706544,   41;707032,   48;707657,   62;708302,   64;708854,   55;709201,   34;709396,   19;709635,   23;710094,   45;710798,   70;711618,   82;712317,   69;712781,   46;713098,   31;713499,   40;714158,   65;715062,   90;715965,   90;716620,   65;716991,   37;717264,   27;717738,   47;718539,   80;719506,   96;720322,   81;720737,   41;720776,    3;720791,    1;720971,   18;721474,   50;722124,   65;722617,   49;722793,   17;722818,    2;722827,    0;723120,   29;723736,   61;724468,   73;725030,   56;725313,   28;725382,    6;725543,   16;726066,   52;726925,   85;727897,   97;728669,   77;729050,   38;729162,   11;729304,   14;729695,   39;730344,   64;731018,   67;731463,   44;731638,   17;731765,   12;732117,   35;732801,   68;733626,   82;733885,   25;733988,   10;734154,   16;734232,    7;734364,   13;734579,   21;735414,   83;736088,   67;736127,    3;736215,    8;736293,    7;736332,    3;736855,   52;737138,   28;737192,    5;737402,   21;737480,    7;737695,   21;737773,    7;   300,  300;749866, 749866;  14,  627;"""


def handle_client(conn, addr):
    print(f"Connected to {addr}")
    try:
        while True:
            message = conn.recv(1024).decode('ascii')
            if message.strip() == "test":
                print("Received test message from client.")
                conn.sendall(raw_data.encode('ascii'))
                print("Sent mock raw data to client.")
                break
            else:
                print(f"Received unexpected message: {message}")
    except Exception as e:
        print(f"Error in client handler: {e}")
    finally:
        conn.close()
        print("Connection closed by server.")


def mock_server(host, port):
    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server_socket.bind((host, port))
    server_socket.listen(5)
    print(f"Mock server listening on {host}:{port}")
    while True:
        conn, addr = server_socket.accept()
        client_thread = threading.Thread(target=handle_client, args=(conn, addr), daemon=True)
        client_thread.start()


if __name__ == "__main__":
    mock_server('127.0.0.1', 5051)


